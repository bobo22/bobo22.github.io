(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{156:function(a,s,t){"use strict";t.r(s);var e=t(0),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("因为目前项目中可以使用es6代替传统的es5代码，所以这边总结一下项目中常用的es6代码")]),a._v(" "),t("h3",{attrs:{id:"let和const"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#let和const"}},[a._v("#")]),a._v(" let和const")]),a._v(" "),t("p",[a._v("定义变量使用let和const，常量使用const，基础变量建议使用let定义。")]),a._v(" "),t("h3",{attrs:{id:"箭头函数（-）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数（-）"}},[a._v("#")]),a._v(" 箭头函数（=>）")]),a._v(" "),t("p",[a._v("定义函数建议使用箭头函数，使用清晰，不过需要注意里面this的指向问题，箭头函数里面的this在定义的时候就已经规定了，不是传统的调用的时候才出现的环境。")]),a._v(" "),t("h3",{attrs:{id:"对象的函数变量缩写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象的函数变量缩写"}},[a._v("#")]),a._v(" 对象的函数变量缩写")]),a._v(" "),t("p",[a._v("例如ajax成功回调之前是使用success：function(result){},现在可以使用success(result){}代替")]),a._v(" "),t("h3",{attrs:{id:"数组的遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组的遍历"}},[a._v("#")]),a._v(" 数组的遍历")]),a._v(" "),t("p",[a._v("以前我们常用的基础循环遍历数组，获取元素等等，或者使用foreach遍历元素，当然foreach存在一个缺陷，不能使用break或者return中断或者回到外层函数。现在我们可以使用forof循环对数组进行循环。for(let value of arr){}。当然forof还可以遍历set，map集合。")]),a._v(" "),t("h3",{attrs:{id:"对象的遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象的遍历"}},[a._v("#")]),a._v(" 对象的遍历")]),a._v(" "),t("p",[a._v("遍历对象我们可以使用es6带的Object.values。es6新带了Object.values和Object.keys,这两个函数处理是返回处理对象的一个数组，key返回的是对象的键数组，values返回的是处理对象的值数组。同时里面可以return false进行中断")]),a._v(" "),t("h3",{attrs:{id:"解构的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解构的使用"}},[a._v("#")]),a._v(" 解构的使用")]),a._v(" "),t("p",[a._v("交换两个值 [a,b] = [b,a]。提取接口返回的值并进行处理，")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('let jsonData = {\n  id: 42,\n  status: "OK",\n  data: [867, 5309]\n};\n\nlet { id, status, data: number } = jsonData;\n//data:number 其实number是定义的变量，data是实际匹配的数据\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("p",[a._v("这样子赋值就不用我们一个变量一个变量的赋值了。")]),a._v(" "),t("h3",{attrs:{id:"模板字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模板字符串"}},[a._v("#")]),a._v(" 模板字符串")]),a._v(" "),t("p",[a._v("这边我并不很推荐使用es6的模板字符串，使用目前的脚本方式，待用mustache渲染应该也可行。")]),a._v(" "),t("h3",{attrs:{id:"函数默认值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数默认值"}},[a._v("#")]),a._v(" 函数默认值")]),a._v(" "),t("p",[a._v("函数传参的时候可以带默认值\nfunction test(key = 1){}")]),a._v(" "),t("h3",{attrs:{id:"rest参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rest参数"}},[a._v("#")]),a._v(" rest参数")]),a._v(" "),t("p",[a._v("可以使用...代替所有函数参数")]),a._v(" "),t("h3",{attrs:{id:"array-from"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array-from"}},[a._v("#")]),a._v(" Array.from()")]),a._v(" "),t("p",[a._v("该函数可以将类数组转化为真实的数组，最常见的就是获取到的dom数组转为真实的数组，并进行循环等操作。")]),a._v(" "),t("h3",{attrs:{id:"array-every"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array-every"}},[a._v("#")]),a._v(" Array.every()")]),a._v(" "),t("p",[a._v("该方法，用于遍历数组的每一个元素，看是不是数组内的每一个值都满足该方法，满足的话返回true，有一个不满足则返回false")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var ages = [32, 33, 16, 40];\n\nfunction checkAdult(age) {\n    return age >= 18;\n}\n\nfunction myFunction() {\n    document.getElementById("demo").innerHTML = ages.every(checkAdult);\n}\n\n//false\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("h3",{attrs:{id:"array-filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array-filter"}},[a._v("#")]),a._v(" array.filter()")]),a._v(" "),t("p",[a._v("用于对数组中每个元素进行过滤，返回的输一个新数组，里面的值为满足filter里面条件的所有元素")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const filtered = [1, 2, 3].filter(element => element > 1);\n// filtered: [2, 3];\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("他和map的区别是，map里不满足的元素位置会填充一个undefined的值。")]),a._v(" "),t("h3",{attrs:{id:"数组去重"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组去重"}},[a._v("#")]),a._v(" 数组去重")]),a._v(" "),t("p",[a._v("[...new Set(array)]")])])}),[],!1,null,null,null);s.default=r.exports}}]);